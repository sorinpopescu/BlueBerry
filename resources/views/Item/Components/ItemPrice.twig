<script type="x/template" data-component="item-price">
<div :class="{ 'has-crossprice': hasCrossPrice }">
    <div class="crossprice" v-if="currentVariation.prices.rrp && currentVariation.prices.rrp.data.basePrice > 0 && currentVariation.prices.rrp.data.basePrice > currentVariation.prices.default.unitPrice.value">
        <del class="text-muted small text-appearance rrp">
            {% if item.documents[0].data.texts.lang == 'en' %}RRP ${ currentVariation.prices.rrp.data.basePrice | currency(currentVariation.prices.rrp.currency) } {% endif %}{% if item.documents[0].data.texts.lang == 'de' %}UVP ${ currentVariation.prices.rrp.data.basePrice | currency(currentVariation.prices.rrp.currency) }{% endif %}
        </del>
    </div>

    <div class="discount" v-if="currentVariation.prices.rrp && currentVariation.prices.rrp.data.basePrice > 0 && currentVariation.prices.rrp.data.basePrice > currentVariation.prices.default.unitPrice.value">
        {% set discountNew = 100 - ((item.documents[0].data.prices.default.price.value * 100) / item.documents[0].data.prices.rrp.data.basePrice) %}
        {% if item.documents[0].data.texts.lang == 'en' %}Discount:{% endif %}{% if item.documents[0].data.texts.lang == 'de' %}Rabatt:{% endif %} {{ discountNew|round }}%
    </div>

    <span class="price h1">
        <span>
            <template v-if="showDynamicPrice">
                {{ trans("Ceres::Template.dynamicVariationPrice",
                         {
                             "price": "${options.filters.currency(variationTotalPrice, currentVariation.prices.default.currency)}"
                         }
                ) }}
            </template>

            <template v-else>
                ${ variationTotalPrice | currency(currentVariation.prices.default.currency) }
            </template>
        </span>
        <sup>*</sup>
    </span>

    <div class="base-price text-muted my-3" v-if="currentVariation.unit">
        <div>
            ${ $translate("Ceres::Template.singleItemContent") }
            <span>${ currentVariation.unit.content | numberFormat } </span>
            <span>${ currentVariation.unit.names.name }</span>
        </div>
        <div v-if="currentVariation.variation.mayShowUnitPrice">
            ${ $translate("Ceres::Template.singleItemUnitPrice") }
            <span class="base-price-value">
                ${ variationGraduatedPrice.basePrice | specialOffer(currentVariation.prices, "basePrice") }
            </span>
        </div>
    </div>
</div>
</script>
<script>
export default {
    name: "item-price",

    props:
    {
        showCrossPrice:
        {
            type: Boolean,
            default: true
        }
    },

    inject: {
        itemId: {
            default: null
        }
    },

    computed:
    {
        currentVariation() {
            return this.$store.getters[`${this.itemId}/currentItemVariation`]
        },

        hasCrossPrice() {
            return !!this.currentVariation.prices.rrp &&
                this.currentVariation.prices.rrp.unitPrice.value > 0 &&
                this.currentVariation.prices.rrp.unitPrice.value > this.currentVariation.prices.default.unitPrice.value;
        },

        variationGraduatedPrice() {
            return this.$store.getters[`${this.itemId}/variationGraduatedPrice`];
        },

        variationTotalPrice() {
            return this.$store.getters[`${this.itemId}/variationTotalPrice`];
        },

        showDynamicPrice() {
            const state = this.$store.state.items[this.itemId];
            return App.config.item.showPleaseSelect
                && (state.variationSelect && !state.variationSelect.isVariationSelected)
                && (state.pleaseSelectVariationId === this.currentVariation.variation.id
                    || state.pleaseSelectVariationId === 0);
        }
    }
}
</script>